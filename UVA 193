#include<bits/stdc++.h>
using namespace std;
 
#define int long long int
#define MOD 1000000007
#define pb push_back
#define pii pair<int,int>
#define mp make_pair

int dx4[4] = {0, 1, 0, -1};
int dy4[4] = {1, 0, -1, 0};
int dy8[8] = {1, 1, 1, 0, -1, -1, -1, 0};
int dx8[8] = {-1, 0, 1, 1, 1, 0, -1, -1};

vector<vector<int>> g;
vector<int> ans;
bool colored[101];
char color[101];
int n, e;

void dfs(int x){

    if(x==n+1){
        int b = 0;
        for(int i=1; i<=n; i++) if(color[i] == 'b') b++;
        if(b>ans.size()){
            ans.clear();
            for(int i=1; i<=n; i++) if(color[i] == 'b') ans.pb(i);
        }
        return;
    }

    bool canBeBlack = true;
    for(int i=0; i<g[x].size(); i++){
        int node = g[x][i];
        if(colored[node] == 1 && color[node] == 'b') {
            canBeBlack = 0;
            break;
        }
    }
    colored[x] =1;
    if(canBeBlack){
        color[x] = 'b';
        dfs(x+1);
    }
    color[x] = 'w';
    dfs(x+1);
    colored[x] = 0;
}

void solve(){
    cin >> n >> e;
    g.clear();
    g.resize(n+1);
    for(int i=0; i<=n; i++){
        color[i] = 'b';
        colored[i] = 0;
    } 
    ans.clear();
    for(int i=0; i<e; i++){
        int a, b;
        cin >> a >> b;
        g[a].pb(b);
        g[b].pb(a);
    }

    dfs(1);

    cout << ans.size() << '\n';
    for(int i=0; i<ans.size(); i++){
        cout << ans[i];
        if(i!=ans.size()-1) cout << " ";
    }
    cout << "\n";
}

int32_t main(){
 
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
 
    #ifndef ONLINE_JUDGE
         freopen("input.txt",  "r",  stdin);
         freopen("output.txt", "w", stdout);
    #endif

    int t;
    cin >> t;

    while(t--){
        solve();
    }
    
    return 0;
}
