#include<bits/stdc++.h>
using namespace std;
 
#define int long long int
#define MOD 1000000007
#define pb push_back
#define pii pair<int,int>
#define mp make_pair

int dx4[4] = {0, 1, 0, -1};
int dy4[4] = {1, 0, -1, 0};
int dy8[8] = {1, 1, 1, 0, -1, -1, -1, 0};
int dx8[8] = {-1, 0, 1, 1, 1, 0, -1, -1};

bool isPrime[1000001];

void sieve(){
    for(int i=0; i<1000001; i++) isPrime[i] = 1;
    isPrime[0] = 0;
    isPrime[1] = 0;
    for(int i=2; i*i<1000001; i++){
        if(!isPrime[i]) continue;
        for(int j=i*i; j<1000001; j+=i){
            isPrime[j] = 0;
        }
    }
}

vector<pii> factorise(int x){
    vector<pii> ans;
    int up = x;
    for(int i=2; i*i<=up; i++){
        if(!isPrime) continue;
        int f = 0;
        while(x%i == 0){
            f++;
            x/=i;
        }
        if(f>0){
            ans.pb(mp(i,f));
        }
    }
    if(x>1) ans.pb(mp(x,1));
    return ans;
}

int getFreq(int n, int el){
    int ans = 0;

    while(n>0){
        ans += n/el;
        n/=el;
    }
    return ans;
}

int32_t main(){
 
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
 
    #ifndef ONLINE_JUDGE
         freopen("input.txt",  "r",  stdin);
         freopen("output.txt", "w", stdout);
    #endif

    sieve();

    int n, m;

    while(cin >> n >> m){
        vector<pii> facs = factorise(m);
        bool ans = 1;

        for(int i=0; i<facs.size(); i++){
            int el = facs[i].first, f = facs[i].second;
            if(getFreq(n, el)<f){
                ans = false;
                break;
            }
        }

        if(ans) cout << m << " divides " << n << "!\n";
        else cout << m << " does not divide " << n << "!\n";
    }
    
    
    return 0;
}
